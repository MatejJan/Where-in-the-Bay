// Generated by CoffeeScript 1.10.0
(function() {
  window.DataGrid = (function() {
    function DataGrid(scene, terrain) {
      var column, geometry, height, i, j, origin, ref, ref1, root, scale, spacing, x, y;
      this.size = 80;
      root = new THREE.Object3D();
      scene.add(root);
      scale = terrain.size / this.size;
      root.scale.set(scale, terrain.size * 0.2, scale);
      root.position.set(-terrain.size * 0.5, 0, -terrain.size * 0.5);
      spacing = 0.5;
      geometry = new THREE.BoxGeometry(1 - spacing, 1, 1 - spacing);
      this.columns = [];
      for (x = i = 0, ref = this.size; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        this.columns[x] = [];
        for (y = j = 0, ref1 = this.size; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
          height = terrain.heightAt(x / this.size, y / this.size);
          if (!((0 <= height && height < 100))) {
            continue;
          }
          column = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial(0xffffff));
          column.position.set(0, 0.5, 0);
          origin = new THREE.Object3D();
          origin.add(column);
          origin.position.set(x + 0.5, 0, y + 0.5);
          origin.scale.set(1, -0.01, 1);
          this.columns[x][y] = origin;
          root.add(origin);
        }
      }
      this.functions = [];
      this.functions.push(new Function({
        name: "Median Rent",
        data: new DataMap('medianrent.png')
      }));
      this.functions.push(new Function({
        name: "Median Income",
        data: new DataMap('medianincome.png')
      }));
      this.functions.push(new Function({
        name: "Mortgage Affordability",
        data: new DataMap('homeaffordability.png')
      }));
      this.functions.push(new Function({
        name: "Population Density",
        data: new DataMap('density.png')
      }));
      this.functions.push(new Function({
        name: "Household Density",
        data: new DataMap('density2.png')
      }));
      this.functions.push(new Function({
        name: "Public Transport",
        data: new DataMap('publictransport.png')
      }));
      this.functions.push(new Function({
        name: "School API Score",
        data: new DataMap('schools.png')
      }));
      this.functions.push(new Function({
        name: "Regulated Air Sites",
        data: new DataMap('regulatedairsites.png')
      }));
      this.functions.push(new Function({
        name: "Toxic Release Inventory",
        data: new DataMap('toxicreleaseinventory.png')
      }));
      this.functions.push(new Function({
        name: "Greenhouse Gas Inventory",
        data: new DataMap('greenhousegasinventory.png')
      }));
      this.functions.push(new Function({
        name: "Asian",
        data: new DataMap('asian.png')
      }));
      this.functions.push(new Function({
        name: "Black",
        data: new DataMap('black.png')
      }));
      this.functions.push(new Function({
        name: "Hispanic",
        data: new DataMap('hispanic.png')
      }));
      this.functions.push(new Function({
        name: "White",
        data: new DataMap('white.png')
      }));
      this.gradient = new Gradient('gradient.png');
    }

    DataGrid.prototype.valueAt = function(x, y, dataMap) {
      return dataMap.valueAt(x / this.size, y / this.size);
    };

    DataGrid.prototype.update = function() {
      var base, column, currentValue, dataFunction, delta, i, newValue, range, ref, results, targetValue, totalWeights, value, weight, x, y;
      results = [];
      for (x = i = 0, ref = this.size; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
        results.push((function() {
          var j, k, len, ref1, ref2, results1;
          results1 = [];
          for (y = j = 0, ref1 = this.size; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
            column = this.columns[x][y];
            if (!column) {
              continue;
            }
            targetValue = 1;
            totalWeights = 0;
            ref2 = this.functions;
            for (k = 0, len = ref2.length; k < len; k++) {
              dataFunction = ref2[k];
              value = this.valueAt(x, y, dataFunction);
              weight = dataFunction.weight();
              totalWeights += weight;
              base = 1 - weight;
              range = weight;
              targetValue *= base + range * value;
            }
            if (!totalWeights) {
              targetValue = 0.001;
            }
            currentValue = column.scale.y;
            delta = targetValue - currentValue;
            newValue = currentValue + delta * 0.1;
            newValue = Math.max(newValue, 0.001);
            column.scale.y = newValue;
            results1.push(column.children[0].material.color.set(this.gradient.colorAt(newValue)));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return DataGrid;

  })();

}).call(this);

//# sourceMappingURL=datagrid.js.map
